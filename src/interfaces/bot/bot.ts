// Telegram bot interface
import { Telegraf, Context, Markup } from 'telegraf';
import { config } from '../../config';
import { JoinRaffleUseCase } from '../../application/usecases/JoinRaffleUseCase';
import { DrawRaffleUseCase } from '../../application/usecases/DrawRaffleUseCase';
import { RaffleRepository } from '../../domain/repositories/RaffleRepository';
import { WalletProvider } from '../../domain/services/WalletProvider';

interface BotDependencies {
  joinRaffleUseCase: JoinRaffleUseCase;
  drawRaffleUseCase: DrawRaffleUseCase;
  raffleRepository: RaffleRepository;
  walletProvider: WalletProvider;
}

export function createBot(deps: BotDependencies): Telegraf {
  const bot = new Telegraf(config.telegramBotToken);

  // Start command
  bot.start(async (ctx) => {
    const userId = BigInt(ctx.from!.id);
    const username = ctx.from!.username || ctx.from!.first_name;
    
    console.log(`New user started bot: ${userId} (${username})`);
    
    const welcomeMessage = `
üé∞ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Telegram Stars Raffle!*

–≠—Ç–æ —á–µ—Å—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å—é.

üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/status - –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
/join - –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ  
/balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å
/fairness - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏
/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥

üí° *–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*
‚Ä¢ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 1 –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –∑–≤–µ–∑–¥–∞
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ä—Ç –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
‚Ä¢ 100% —á–µ—Å—Ç–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞

üí∞ *–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: 100 ‚≠ê* (–≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –∑–≤–µ–∑–¥—ã –¥–ª—è –¥–µ–º–æ)
`;

    await ctx.replyWithMarkdown(welcomeMessage, 
      Markup.inlineKeyboard([
        [Markup.button.callback('üìä –°—Ç–∞—Ç—É—Å —Ä–æ–∑—ã–≥—Ä—ã—à–∞', 'status')],
        [Markup.button.callback('üéØ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å', 'join'), Markup.button.callback('üí∞ –ë–∞–ª–∞–Ω—Å', 'balance')],
        [Markup.button.callback('üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Å—Ç–Ω–æ—Å—Ç—å', 'fairness')]
      ])
    );
  });

  // Status command
  bot.command('status', async (ctx) => {
    await showRaffleStatus(ctx, deps);
  });

  // Join command  
  bot.command('join', async (ctx) => {
    await handleJoinRaffle(ctx, deps);
  });

  // Fairness command
  bot.command('fairness', async (ctx) => {
    await showFairness(ctx, deps);
  });

  // Balance command
  bot.command('balance', async (ctx) => {
    try {
      const userId = BigInt(ctx.from!.id);
      const balance = await deps.walletProvider.getBalance(userId);
      await ctx.replyWithMarkdown(`üí∞ *–í–∞—à –±–∞–ª–∞–Ω—Å: ${balance} ‚≠ê*\n\n_–≠—Ç–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –∑–≤–µ–∑–¥—ã –¥–ª—è –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞_`);
    } catch (error) {
      console.error('Error getting balance:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞');
    }
  });

  // Stats command
  bot.command('stats', async (ctx) => {
    try {
      const userId = BigInt(ctx.from!.id);
      await showUserStats(ctx, deps, userId);
    } catch (error) {
      console.error('Error getting stats:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
    }
  });

  // Help command
  bot.help((ctx) => {
    const helpText = `
üé∞ *Telegram Stars Raffle Bot*

üìã *–ö–æ–º–∞–Ω–¥—ã:*
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/status - –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞  
/join - –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ç–µ–∫—É—â–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ
/balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –∑–≤–µ–∑–¥
/stats - –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—á–∞—Å—Ç–∏–π
/fairness - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–µ
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

üîò *Inline –∫–Ω–æ–ø–∫–∏:*
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º.

‚ùì *–í–æ–ø—Ä–æ—Å—ã:*
–°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–∞. –í—Å–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏.
`;
    ctx.replyWithMarkdown(helpText);
  });

  // Callback query handlers
  bot.action('status', async (ctx) => {
    await ctx.answerCbQuery();
    await showRaffleStatus(ctx, deps);
  });

  bot.action('join', async (ctx) => {
    await ctx.answerCbQuery();
    await handleJoinRaffle(ctx, deps);
  });

  bot.action('fairness', async (ctx) => {
    await ctx.answerCbQuery();
    await showFairness(ctx, deps);
  });

  bot.action('balance', async (ctx) => {
    await ctx.answerCbQuery();
    try {
      const userId = BigInt(ctx.from!.id);
      const balance = await deps.walletProvider.getBalance(userId);
      await ctx.replyWithMarkdown(`üí∞ *–í–∞—à –±–∞–ª–∞–Ω—Å: ${balance} ‚≠ê*\n\n_–≠—Ç–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –∑–≤–µ–∑–¥—ã –¥–ª—è –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞_`);
    } catch (error) {
      console.error('Error getting balance:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞');
    }
  });

  // Admin commands
  bot.command('admin_draw', async (ctx) => {
    const userId = ctx.from!.id.toString();
    if (userId !== config.adminUserId) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
      return;
    }

    try {
      const result = await deps.drawRaffleUseCase.execute();
      if (result.status === 'success') {
        await ctx.replyWithMarkdown(`‚úÖ *–†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à–µ–Ω!*

üèÜ *–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:* User ${result.winnerUserId}
üéØ *–ò–Ω–¥–µ–∫—Å:* ${result.winnerIndex} –∏–∑ ${result.participantsCount}
üí∞ *–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:* ${result.participantsCount}

üîç *Fairness proof:*
Seed: \`${result.seed.substring(0, 16)}...\`
Version: ${result.fairnessVersion}`);
      } else {
        let errorMsg = `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ä–æ–∑—ã–≥—Ä—ã—à: ${result.status}`;
        if ('message' in result && result.message) {
          errorMsg += `\n${result.message}`;
        }
        await ctx.reply(errorMsg);
      }
    } catch (error) {
      console.error('Admin draw error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞');
    }
  });

  bot.command('admin_status', async (ctx) => {
    const userId = ctx.from!.id.toString();
    if (userId !== config.adminUserId) {
      await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
      return;
    }

    try {
      const raffle = await deps.raffleRepository.findActiveRaffle();
      if (!raffle) {
        await ctx.reply('üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞');
        return;
      }

      const r = raffle.toJSON();
      const statusText = `üîß *Admin - –°—Ç–∞—Ç—É—Å —Ä–æ–∑—ã–≥—Ä—ã—à–∞ #${r.id}*

üìä *–û—Å–Ω–æ–≤–Ω–æ–µ:*
‚Ä¢ –°—Ç–∞—Ç—É—Å: ${r.status}
‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${r.totalEntries}/${r.threshold}
‚Ä¢ –§–æ–Ω–¥: ${r.totalFund} ‚≠ê
‚Ä¢ –°–æ–∑–¥–∞–Ω: ${r.createdAt.toLocaleString('ru')}

üîê *Fairness:*
‚Ä¢ Seed Hash: ${r.seedHash?.substring(0, 40) || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}...
‚Ä¢ Grace: ${r.graceSeconds}s
${r.readyAt ? `‚Ä¢ Ready —Å: ${r.readyAt.toLocaleString('ru')}` : ''}

‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏:*
‚Ä¢ Winner Share: ${r.winnerSharePercent}%
‚Ä¢ Commission: ${r.commissionPercent}%
${r.forced ? '‚Ä¢ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫: –î–∞' : ''}`;

      await ctx.replyWithMarkdown(statusText);
    } catch (error) {
      console.error('Admin status error:', error);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞');
    }
  });

  // Error handling
  bot.catch((err, ctx) => {
    console.error('Bot error:', err);
    if (ctx) {
      ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.').catch(console.error);
    }
  });

  return bot;
}

async function showRaffleStatus(ctx: Context, deps: BotDependencies) {
  try {
    const raffle = await deps.raffleRepository.findActiveRaffle();
    
    if (!raffle) {
      await ctx.replyWithMarkdown(`üì≠ *–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞*

–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –Ω–µ—Ç. 
–°–ª–µ–¥—É—é—â–∏–π —Ä–æ–∑—ã–≥—Ä—ã—à –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.`);
      return;
    }

    const r = raffle.toJSON();
    let statusText = '';
    
    switch (r.status) {
      case 'init':
      case 'collecting':
        statusText = `üé∞ *–ê–∫—Ç–∏–≤–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à #${r.id}*

üìä *–°—Ç–∞—Ç—É—Å:* –°–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
üë• *–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:* ${r.totalEntries}
üéØ *–ü–æ—Ä–æ–≥:* ${r.threshold}
üí∞ *–ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥:* ${r.totalFund} –∑–≤–µ–∑–¥
üíé *–°—Ç–∞–≤–∫–∞:* ${r.entryCost} –∑–≤–µ–∑–¥–∞

${r.totalEntries < r.threshold 
  ? `‚è≥ –ù—É–∂–Ω–æ –µ—â–µ ${r.threshold - r.totalEntries} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞`
  : 'üî• –ü–æ—Ä–æ–≥ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç! –†–æ–∑—ã–≥—Ä—ã—à —Å–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—Ç—Å—è'
}`;
        break;
        
      case 'ready':
        const gracePeriod = r.readyAt ? new Date(r.readyAt.getTime() + r.graceSeconds * 1000) : null;
        statusText = `üé∞ *–†–æ–∑—ã–≥—Ä—ã—à #${r.id} –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—é*

üë• *–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:* ${r.totalEntries}
üí∞ *–ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥:* ${r.totalFund} –∑–≤–µ–∑–¥
‚è∞ *Grace –ø–µ—Ä–∏–æ–¥ –¥–æ:* ${gracePeriod?.toLocaleString('ru') || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}

üé≤ –†–æ–∑—ã–≥—Ä—ã—à –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ–¥–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ grace –ø–µ—Ä–∏–æ–¥–∞.`;
        break;
        
      case 'completed':
        statusText = `‚úÖ *–†–æ–∑—ã–≥—Ä—ã—à #${r.id} –∑–∞–≤–µ—Ä—à–µ–Ω*

üë• *–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:* ${r.totalEntries}
üí∞ *–ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥:* ${r.totalFund} –∑–≤–µ–∑–¥
üèÜ *–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:* User ${r.winnerUserId || '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}

üîç –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /fairness –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞.`;
        break;
        
      default:
        statusText = `üìä –†–æ–∑—ã–≥—Ä—ã—à #${r.id} –≤ —Å—Ç–∞—Ç—É—Å–µ: ${r.status}`;
    }

    const keyboard = [];
    if (r.status === 'collecting' || r.status === 'ready') {
      keyboard.push([Markup.button.callback('üéØ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å', 'join')]);
    }
    keyboard.push([Markup.button.callback('üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Å—Ç–Ω–æ—Å—Ç—å', 'fairness')]);

    await ctx.replyWithMarkdown(statusText, Markup.inlineKeyboard(keyboard));
    
  } catch (error) {
    console.error('Error showing raffle status:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞');
  }
}

async function handleJoinRaffle(ctx: Context, deps: BotDependencies) {
  try {
    const userId = BigInt(ctx.from!.id);
    const username = ctx.from!.username || ctx.from!.first_name;
    
    const result = await deps.joinRaffleUseCase.execute({
      userId,
      username,
      entryCost: 1 // Virtual stars
    });

    switch (result.status) {
      case 'success':
        await ctx.replyWithMarkdown(`‚úÖ *–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Ä–æ–∑—ã–≥—Ä—ã—à—É!*

üé∞ –†–æ–∑—ã–≥—Ä—ã—à #${result.raffleId}
üë§ –í–∞—à –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞: ${result.entrySequence}
üë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${result.totalEntries}/${result.threshold}

${result.thresholdReached 
  ? 'üî• –ü–æ—Ä–æ–≥ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç! –†–æ–∑—ã–≥—Ä—ã—à —Å–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—Ç—Å—è.'
  : `‚è≥ –ù—É–∂–Ω–æ –µ—â–µ ${result.threshold - result.totalEntries} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.`
}`);
        break;
        
      case 'already_joined':
        await ctx.reply('‚ÑπÔ∏è –í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ!');
        break;
        
      case 'no_active_raffle':
        await ctx.reply('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –¥–ª—è —É—á–∞—Å—Ç–∏—è');
        break;
        
      case 'insufficient_balance':
        await ctx.reply('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —É—á–∞—Å—Ç–∏—è. –ù—É–∂–Ω–∞ 1 –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –∑–≤–µ–∑–¥–∞.');
        break;
        
      default:
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Ä–æ–∑—ã–≥—Ä—ã—à—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
    
  } catch (error) {
    console.error('Error joining raffle:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∫ —Ä–æ–∑—ã–≥—Ä—ã—à—É');
  }
}

async function showFairness(ctx: Context, deps: BotDependencies) {
  const fairnessText = `üîç *–°–∏—Å—Ç–µ–º–∞ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏*

–ù–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏ —á–µ—Å—Ç–Ω–æ—Å—Ç–∏:

üîê *–ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã:*
1. –ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è —Å–ª—É—á–∞–π–Ω—ã–π seed
2. –ü—É–±–ª–∏–∫—É–µ—Ç—Å—è hash(seed) - –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–¥–µ–ª–∞—Ç—å
3. –ü–æ—Å–ª–µ grace –ø–µ—Ä–∏–æ–¥–∞ seed —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è
4. –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ –∏–∑ seed + —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

‚úÖ *–ü—Ä–æ–≤–µ—Ä—è–µ–º–æ—Å—Ç—å:*
‚Ä¢ –õ—é–±–æ–π –º–æ–∂–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Å—Ç–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SHA256 –¥–ª—è –≤—Å–µ—Ö —Ö–µ—à–µ–π
‚Ä¢ –ê–ª–≥–æ—Ä–∏—Ç–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫—Ä—ã—Ç –∏ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º

üìñ *–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:*
–ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–æ –∞–¥—Ä–µ—Å—É: github.com/VictorFortuna/Telegram_Stars_Raffle_v4.0

üî¢ *–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞:* v0b`;

  await ctx.replyWithMarkdown(fairnessText);
}

async function showUserStats(ctx: Context, deps: BotDependencies, userId: bigint) {
  // For MVP, we'll show basic stats. In the future, this could come from a dedicated UserRepository
  try {
    const balance = await deps.walletProvider.getBalance(userId);
    
    const statsText = `üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*

üí∞ *–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:* ${balance} ‚≠ê

_–í –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö –∑–¥–µ—Å—å –±—É–¥–µ—Ç:_
‚Ä¢ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–∏–π
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–∏–≥—Ä—ã—à–µ–π  
‚Ä¢ –°—É–º–º–∞ –≤—ã–∏–≥—Ä—ã—à–µ–π
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏

üîÆ *–ò—Å—Ç–æ—Ä–∏—è —É—á–∞—Å—Ç–∏–π*
_–§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ_`;

    await ctx.replyWithMarkdown(statsText);
  } catch (error) {
    console.error('Error showing user stats:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  }
}